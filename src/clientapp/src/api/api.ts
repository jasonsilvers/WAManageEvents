// tslint:disable
/**
 * WAManageEvent
 * Add on to wild apricot for on site event managment
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface TimeZone
 */
export interface TimeZone {
    /**
     * 
     * @type {string}
     * @memberof TimeZone
     */
    ZoneId?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeZone
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZone
     */
    UtcOffset?: number;
}
/**
 * 
 * @export
 * @interface WaEvent
 */
export interface WaEvent {
    /**
     * 
     * @type {string}
     * @memberof WaEvent
     */
    EndDate?: string;
    /**
     * 
     * @type {number}
     * @memberof WaEvent
     */
    Id: number;
    /**
     * 
     * @type {boolean}
     * @memberof WaEvent
     */
    IsEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WaEvent
     */
    Location?: string;
    /**
     * 
     * @type {string}
     * @memberof WaEvent
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof WaEvent
     */
    RegistrationLimit?: number;
    /**
     * 
     * @type {string}
     * @memberof WaEvent
     */
    StartDate?: string;
    /**
     * 
     * @type {WaEventDetails}
     * @memberof WaEvent
     */
    Details?: WaEventDetails;
}
/**
 * 
 * @export
 * @interface WaEventDetails
 */
export interface WaEventDetails {
    /**
     * 
     * @type {string}
     * @memberof WaEventDetails
     */
    DescriptionHtml?: string;
    /**
     * 
     * @type {TimeZone}
     * @memberof WaEventDetails
     */
    TimeZone?: TimeZone;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `Events`.
         * @summary Create a Events
         * @param {WaEvent} waEvent A new &#x60;Events&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvents: async (waEvent: WaEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'waEvent' is not null or undefined
            if (waEvent === null || waEvent === undefined) {
                throw new RequiredError('waEvent','Required parameter waEvent was null or undefined when calling createEvents.');
            }
            const localVarPath = `/waevents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof waEvent !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(waEvent !== undefined ? waEvent : {}) : (waEvent || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `Events`.
         * @summary Delete a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvents: async (eventsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventsId' is not null or undefined
            if (eventsId === null || eventsId === undefined) {
                throw new RequiredError('eventsId','Required parameter eventsId was null or undefined when calling deleteEvents.');
            }
            const localVarPath = `/waevents/{eventsId}`
                .replace(`{${"eventsId"}}`, encodeURIComponent(String(eventsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `Events`.
         * @summary Get a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (eventsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventsId' is not null or undefined
            if (eventsId === null || eventsId === undefined) {
                throw new RequiredError('eventsId','Required parameter eventsId was null or undefined when calling getEventById.');
            }
            const localVarPath = `/waevents/{eventsId}`
                .replace(`{${"eventsId"}}`, encodeURIComponent(String(eventsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `Events` entities.
         * @summary List All events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/waevents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `Events`.
         * @summary Update a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {WaEvent} waEvent Updated &#x60;Events&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvents: async (eventsId: string, waEvent: WaEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventsId' is not null or undefined
            if (eventsId === null || eventsId === undefined) {
                throw new RequiredError('eventsId','Required parameter eventsId was null or undefined when calling updateEvents.');
            }
            // verify required parameter 'waEvent' is not null or undefined
            if (waEvent === null || waEvent === undefined) {
                throw new RequiredError('waEvent','Required parameter waEvent was null or undefined when calling updateEvents.');
            }
            const localVarPath = `/waevents/{eventsId}`
                .replace(`{${"eventsId"}}`, encodeURIComponent(String(eventsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof waEvent !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(waEvent !== undefined ? waEvent : {}) : (waEvent || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `Events`.
         * @summary Create a Events
         * @param {WaEvent} waEvent A new &#x60;Events&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvents(waEvent: WaEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createEvents(waEvent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing `Events`.
         * @summary Delete a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvents(eventsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteEvents(eventsId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a single instance of a `Events`.
         * @summary Get a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(eventsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaEvent>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getEventById(eventsId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of all `Events` entities.
         * @summary List All events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WaEvent>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getEvents(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing `Events`.
         * @summary Update a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {WaEvent} waEvent Updated &#x60;Events&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvents(eventsId: string, waEvent: WaEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateEvents(eventsId, waEvent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new instance of a `Events`.
         * @summary Create a Events
         * @param {WaEvent} waEvent A new &#x60;Events&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvents(waEvent: WaEvent, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createEvents(waEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `Events`.
         * @summary Delete a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvents(eventsId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteEvents(eventsId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `Events`.
         * @summary Get a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(eventsId: string, options?: any): AxiosPromise<WaEvent> {
            return DefaultApiFp(configuration).getEventById(eventsId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `Events` entities.
         * @summary List All events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(options?: any): AxiosPromise<Array<WaEvent>> {
            return DefaultApiFp(configuration).getEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `Events`.
         * @summary Update a Events
         * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
         * @param {WaEvent} waEvent Updated &#x60;Events&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvents(eventsId: string, waEvent: WaEvent, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateEvents(eventsId, waEvent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new instance of a `Events`.
     * @summary Create a Events
     * @param {WaEvent} waEvent A new &#x60;Events&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEvents(waEvent: WaEvent, options?: any) {
        return DefaultApiFp(this.configuration).createEvents(waEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `Events`.
     * @summary Delete a Events
     * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEvents(eventsId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteEvents(eventsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `Events`.
     * @summary Get a Events
     * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEventById(eventsId: string, options?: any) {
        return DefaultApiFp(this.configuration).getEventById(eventsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `Events` entities.
     * @summary List All events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEvents(options?: any) {
        return DefaultApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `Events`.
     * @summary Update a Events
     * @param {string} eventsId A unique identifier for a &#x60;Events&#x60;.
     * @param {WaEvent} waEvent Updated &#x60;Events&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEvents(eventsId: string, waEvent: WaEvent, options?: any) {
        return DefaultApiFp(this.configuration).updateEvents(eventsId, waEvent, options).then((request) => request(this.axios, this.basePath));
    }

}


