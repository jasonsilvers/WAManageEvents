// tslint:disable
/**
 * Starter
 * A sample API demonstrate features in the OpenAPI 3.0 specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@team.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    workload?: number;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    rate?: number;
    /**
     * 
     * @type {Teacher}
     * @memberof Course
     */
    teacher?: Teacher;
}
/**
 * 
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    pictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    email?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `course`.
         * @summary Create a course
         * @param {Course} course A new &#x60;course&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse: async (course: Course, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            if (course === null || course === undefined) {
                throw new RequiredError('course','Required parameter course was null or undefined when calling createCourse.');
            }
            const localVarPath = `/courses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof course !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(course !== undefined ? course : {}) : (course || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new instance of a `teacher`.
         * @summary Create a teacher
         * @param {Teacher} teacher A new &#x60;teacher&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeacher: async (teacher: Teacher, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacher' is not null or undefined
            if (teacher === null || teacher === undefined) {
                throw new RequiredError('teacher','Required parameter teacher was null or undefined when calling createTeacher.');
            }
            const localVarPath = `/teachers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teacher !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teacher !== undefined ? teacher : {}) : (teacher || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `course`.
         * @summary Delete a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (courseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling deleteCourse.');
            }
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `teacher`.
         * @summary Delete a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher: async (teacherId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            if (teacherId === null || teacherId === undefined) {
                throw new RequiredError('teacherId','Required parameter teacherId was null or undefined when calling deleteTeacher.');
            }
            const localVarPath = `/teachers/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `course`.
         * @summary Get a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse: async (courseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling getCourse.');
            }
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `course` entities.
         * @summary List All courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `teacher`.
         * @summary Get a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher: async (teacherId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            if (teacherId === null || teacherId === undefined) {
                throw new RequiredError('teacherId','Required parameter teacherId was null or undefined when calling getTeacher.');
            }
            const localVarPath = `/teachers/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `teacher` entities.
         * @summary List All teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `course`.
         * @summary Update a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {Course} course Updated &#x60;course&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse: async (courseId: string, course: Course, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            if (courseId === null || courseId === undefined) {
                throw new RequiredError('courseId','Required parameter courseId was null or undefined when calling updateCourse.');
            }
            // verify required parameter 'course' is not null or undefined
            if (course === null || course === undefined) {
                throw new RequiredError('course','Required parameter course was null or undefined when calling updateCourse.');
            }
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof course !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(course !== undefined ? course : {}) : (course || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `teacher`.
         * @summary Update a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {Teacher} teacher Updated &#x60;teacher&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeacher: async (teacherId: string, teacher: Teacher, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            if (teacherId === null || teacherId === undefined) {
                throw new RequiredError('teacherId','Required parameter teacherId was null or undefined when calling updateTeacher.');
            }
            // verify required parameter 'teacher' is not null or undefined
            if (teacher === null || teacher === undefined) {
                throw new RequiredError('teacher','Required parameter teacher was null or undefined when calling updateTeacher.');
            }
            const localVarPath = `/teachers/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teacher !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teacher !== undefined ? teacher : {}) : (teacher || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `course`.
         * @summary Create a course
         * @param {Course} course A new &#x60;course&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCourse(course: Course, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createCourse(course, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new instance of a `teacher`.
         * @summary Create a teacher
         * @param {Teacher} teacher A new &#x60;teacher&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeacher(teacher: Teacher, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createTeacher(teacher, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing `course`.
         * @summary Delete a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCourse(courseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing `teacher`.
         * @summary Delete a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeacher(teacherId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTeacher(teacherId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a single instance of a `course`.
         * @summary Get a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourse(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCourse(courseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of all `course` entities.
         * @summary List All courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCourses(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a single instance of a `teacher`.
         * @summary Get a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacher(teacherId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTeacher(teacherId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of all `teacher` entities.
         * @summary List All teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTeachers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing `course`.
         * @summary Update a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {Course} course Updated &#x60;course&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourse(courseId: string, course: Course, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateCourse(courseId, course, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing `teacher`.
         * @summary Update a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {Teacher} teacher Updated &#x60;teacher&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeacher(teacherId: string, teacher: Teacher, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateTeacher(teacherId, teacher, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new instance of a `course`.
         * @summary Create a course
         * @param {Course} course A new &#x60;course&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse(course: Course, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createCourse(course, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instance of a `teacher`.
         * @summary Create a teacher
         * @param {Teacher} teacher A new &#x60;teacher&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeacher(teacher: Teacher, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createTeacher(teacher, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `course`.
         * @summary Delete a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(courseId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCourse(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `teacher`.
         * @summary Delete a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher(teacherId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `course`.
         * @summary Get a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse(courseId: string, options?: any): AxiosPromise<Course> {
            return DefaultApiFp(configuration).getCourse(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `course` entities.
         * @summary List All courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<Array<Course>> {
            return DefaultApiFp(configuration).getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `teacher`.
         * @summary Get a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher(teacherId: string, options?: any): AxiosPromise<Teacher> {
            return DefaultApiFp(configuration).getTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `teacher` entities.
         * @summary List All teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers(options?: any): AxiosPromise<Array<Teacher>> {
            return DefaultApiFp(configuration).getTeachers(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `course`.
         * @summary Update a course
         * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
         * @param {Course} course Updated &#x60;course&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(courseId: string, course: Course, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateCourse(courseId, course, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `teacher`.
         * @summary Update a teacher
         * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
         * @param {Teacher} teacher Updated &#x60;teacher&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeacher(teacherId: string, teacher: Teacher, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateTeacher(teacherId, teacher, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new instance of a `course`.
     * @summary Create a course
     * @param {Course} course A new &#x60;course&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCourse(course: Course, options?: any) {
        return DefaultApiFp(this.configuration).createCourse(course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new instance of a `teacher`.
     * @summary Create a teacher
     * @param {Teacher} teacher A new &#x60;teacher&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTeacher(teacher: Teacher, options?: any) {
        return DefaultApiFp(this.configuration).createTeacher(teacher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `course`.
     * @summary Delete a course
     * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCourse(courseId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteCourse(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `teacher`.
     * @summary Delete a teacher
     * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTeacher(teacherId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `course`.
     * @summary Get a course
     * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourse(courseId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCourse(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `course` entities.
     * @summary List All courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourses(options?: any) {
        return DefaultApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `teacher`.
     * @summary Get a teacher
     * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeacher(teacherId: string, options?: any) {
        return DefaultApiFp(this.configuration).getTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `teacher` entities.
     * @summary List All teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeachers(options?: any) {
        return DefaultApiFp(this.configuration).getTeachers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `course`.
     * @summary Update a course
     * @param {string} courseId A unique identifier for a &#x60;course&#x60;.
     * @param {Course} course Updated &#x60;course&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCourse(courseId: string, course: Course, options?: any) {
        return DefaultApiFp(this.configuration).updateCourse(courseId, course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `teacher`.
     * @summary Update a teacher
     * @param {string} teacherId A unique identifier for a &#x60;teacher&#x60;.
     * @param {Teacher} teacher Updated &#x60;teacher&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTeacher(teacherId: string, teacher: Teacher, options?: any) {
        return DefaultApiFp(this.configuration).updateTeacher(teacherId, teacher, options).then((request) => request(this.axios, this.basePath));
    }

}


